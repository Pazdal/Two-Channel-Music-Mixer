@startuml

class MainWindow

MainWindow o-- Soundprocessing

class Mixpanel

Soundprocessing o-- Mixpanel : have 2 >

class Action

Soundprocessing o-- Action

class Soundprocessing

class Disc

MainWindow o-- Disc : have 2 >

class Exporting

MainWindow o-- Exporting

class MainWindow{

    -Ui::MainWindow *ui
    -SoundProcessing* soundProc
    -QThread th_soundProc
    -Exporting* Export
    -QTimer dataTimer
    -QTimer dataTimer2
    -QGraphicsPixmapItem* discImg[2]
    -Disc* disc[2]
    -QCPBars *trackPointer
    -QVector<double> x1,y2
    -QCPBars *trackPointer2
    -QVector<double> x2,y1
    -QCPBars *barLoopStart_1
    -QVector<double> xStart_1,yStart_1
    -QCPBars *barLoopEnd_1
    -QVector<double> xEnd_1,yEnd_1
    -QCPBars *barLoopStart_2
    -QVector<double> xStart_2,yStart_2
    -QCPBars *barLoopEnd_2
    -QVector<double> xEnd_2,yEnd_2
    -QVector<double> xfill,yfill
    -QVector<double> x2fill,y2fill
    -QCPBars *returnBar[4]
    -QCPBars *returnBar2[4]
    -QVector<double> xReturn,yReturn
    -QVector<double> xReturn2,yReturn2

    +QReadWriteLock lock

    +explicit MainWindow(QWidget *parent = 0)
    +void setupSoundGraph(QCustomPlot *customPlot)
    +void setupSoundGraph2(QCustomPlot *customPlot)
    +~MainWindow()

    +void loadAudio(QString filename)
    +void loadAudio2(QString filename)
    +void saveActionToFile(QString fileName)
    +void loadActionFromFile(QString fileName)
    +void startExport(QString filename)

    +void bracketDataSlot()
    +void graphClicked(QCPAbstractPlottable *plottable, int dataIndex)
    +void bracketDataSlot2()
    +void graphClicked2(QCPAbstractPlottable *plottable, int dataIndex)
    +void selectAudio()
    +void selectAudio2()
    +void crossFaderChange(int value)
    +void saveAction()
    +void loadAction()
    +void lowChange(int value)
    +void medChange(int value)
    +void highChange(int value)
    +void lowChange2(int value)
    +void medChange2(int value)
    +void highChange2(int value)
    +void crossChanger(int value)
    +void rotate(float angle)
    +void rotate2(float angle)
    +void onExport()
}

class Soundprocessing{

     -QAudioOutput *audioOutput
     -QIODevice *audioDevice
     -double rate

     +enum Actions
     +double buffer1[256]
     +double buffer2[256]
     +explicit SoundProcessing(QObject *parent = nullptr)
     +MixPanel panel1
     +MixPanel panel2
     +Action action
     +QByteArray output1
     +QAudioFormat format
     +QTimer* timer
     +int crossFader

     +void launchActions(quint64 actPos1, quint64 actPos2)

     +void lowEQChange(int value)
     +void medEQChange(int value)
     +void highEQChange(int value)
     +void crossChange(int value)
     +void lowEQChange2(int value)
     +void medEQChange2(int value)
     +void highEQChange2(int value)
     +void crossChange2(int value)
     +void volumeChange(int value)
     +void volumeChange2(int value)
     +void tempoChange(int value)
     +void tempoChange2(int value)

     +void play()
     +void record()
}

class Mixpanel{
    -struct memEQ
    -QAudioDecoder *decoder
    -bool isPlayed
    -bool isSingleLoop
    -bool isBPM
    -bool isDisc
    -double bpm
    -int rewindConst
    -int audioLengthInSec
    -int loopInterval
    -int loopStart
    -int actLoop
    -int discSamples
    -float prevDiscAngle
    -float discSpeed
    -double speed
    -qreal volume
    -memEQ lowMemEq
    -memEQ medMemEq
    -memEQ medMemEq2
    -memEQ highMemEq
    -double lowValue
    -double medValue
    -double highValue

    +QByteArray *channel1
    +QByteArray *channel2
    +bool plot
    +bool audioReady
    +bool isLoopStartSet
    +bool isLoopEndSet
    +bool isLoopingActive
    +bool isLoopingSet
    +bool flags[4]
    +bool loadAudioInterruption
    +double rewindParam
    +double audioLength
    +qint64 loopingStart
    +qint64 loopingEnd
    +qint64 flagPos[4]
    +qint64 duration
    +qint64 actPos
    +qreal realPosition


    +explicit MixPanel(QObject *parent = nullptr)
    +~MixPanel()

    +double processEQ(double sample, memEQ &eq)
    +double processLowUp(double sample)
    +double processLowDown(double sample)
    +double processMediumUp(double sample)
    +double processMediumDown(double sample)
    +double processHighUp(double sample)
    +double processHighDown(double sample)
    +void process(double *buffer, int nFrames)
    +void shelfFilter(double F0, double g, QString type, memEQ &eq)
    +void detectBPM()
    +void setLoop(int loop)
    +void setFlag(int flag)
    +void unsetFlag(int flag)

    +void timeChange(QString time)
    +void writeToFile(quint64 type, quint64 position, quint64 value)
    +void fileReady()
    +void pause()

    +void playPause()
    +void playStop()
    +void playLoop()
    +void playLoopingSet()
    +void playLoopingStart()
    +void playLoopingEnd()
    +void getDiscSpeed(float angle)
    +void enableDisc()
    +void disableDisc()
    +void setFlag1()
    +void setFlag2()
    +void setFlag3()
    +void setFlag4()
    +void unsetFlag1()
    +void unsetFlag2()
    +void unsetFlag3()
    +void unsetFlag4()
    +void setLoop1_16()
    +void setLoop1_8()
    +void setLoop1_4()
    +void setLoop1_2()
    +void setLoop1()
    +void setLoop2()
    +void loadAudio(QString filename)
    +void readBuffer();
    +void finishDecoding()
    +void lowEQ(int value)
    +void medEQ(int value)
    +void highEQ(int value)
    +void speedChange(int value)
    +void volumeChange(int value)
}

class Action{
    +QVector<quint64> buffer
    +QVector<quint64> buffer2
    +bool isRecording

    +explicit Action(QObject *parent = nullptr)

    +QVector<quint64> loadBuffer
    +int p1, p2, beg1, beg2
    +bool actionLoaded;
    +bool isRunning;

    +void saveActionToFile(QString fileName)
    +void writePanel1(quint64 type, quint64 position, quint64 value)
    +void writePanel2(quint64 type, quint64 position, quint64 value)
    +void loadActionFromFile(QString fileName)
    +void record();
    +void run();
}

class Disc{
    -float actAngle
    -float prevAngle
    -float getAngle(QPointF p)

    +explicit Disc();
    +void mouseMoveEvent(QGraphicsSceneMouseEvent* mouseEvent)
    +void mousePressEvent(QGraphicsSceneMouseEvent* mouseEvent)
    +void mouseReleaseEvent(QGraphicsSceneMouseEvent* mouseEvent)

    +void start();
    +void stop();
    +void rotate(float angle);
}

class Exporting{
    -SoundProcessing* soundProc

    +explicit Exporting(SoundProcessing* soundprocessing, QObject *parent = nullptr)

    +void writeWavHeader( QFile * file )
    +void closeWavHeader( QFile * file )

    +void exportReady()

    +void exportFile(QString filename)
}


enum Actions {
  white_noise_true
  white_noise_false
  low
  med
  high
  cross
}

@enduml